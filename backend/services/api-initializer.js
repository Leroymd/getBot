// api-initializer.js
const BitgetAPI = require('./BitgetAPI');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–ª—é—á–µ–π (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
const KEYS_FILE = path.join(__dirname, '..', '.env');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π API
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
async function validateApiKeys() {
  console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.API_KEY || !process.env.SECRET_KEY || !process.env.PASSPHRASE) {
      console.error('‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      console.error('üìã –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API_KEY, SECRET_KEY –∏ PASSPHRASE –≤ —Ñ–∞–π–ª–µ .env');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ .env
      if (!fs.existsSync(KEYS_FILE)) {
        console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        
        // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞ .env
        const envTemplate = `# API –∫–ª—é—á–∏ –¥–ª—è –±–∏—Ä–∂–∏ BitGet
API_KEY=your_api_key_here
SECRET_KEY=your_secret_key_here
PASSPHRASE=your_passphrase_here
BITGET_DEMO=false

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
PORT=5000
NODE_ENV=development

# Telegram Bot (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
TELEGRAM_BOT_TOKEN=
TELEGRAM_CHAT_ID=

# –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
`;
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω –≤ —Ñ–∞–π–ª
        fs.writeFileSync(KEYS_FILE, envTemplate, 'utf8');
        console.log('üìù –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞ .env. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –≤–∞—à–∏–º–∏ –∫–ª—é—á–∞–º–∏ API.');
      }
      
      return false;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ API –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
    const api = new BitgetAPI();
    const isValid = await api.validateKeys(false);
    
    if (!isValid) {
      console.error('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π –Ω–µ —É–¥–∞–ª–∞—Å—å!');
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–µ–π:', error.message);
    return false;
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç API –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª—é—á–∏
 * @param {boolean} requireValidKeys - –¢—Ä–µ–±–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
async function initializeAPI(requireValidKeys = true) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–π
    const keysValid = await validateApiKeys();
    
    if (!keysValid && requireValidKeys) {
      throw new Error('API –∫–ª—é—á–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.');
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ API
    const api = new BitgetAPI();
    
    return {
      success: true,
      api,
      keysValid
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API:', error.message);
    
    return {
      success: false,
      error: error.message,
      keysValid: false
    };
  }
}

module.exports = {
  validateApiKeys,
  initializeAPI
};